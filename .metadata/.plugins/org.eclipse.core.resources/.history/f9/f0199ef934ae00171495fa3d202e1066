import java.io.BufferedReader;
import java.io.BufferedWriter;

import java.io.FileReader;
import java.io.FileWriter;
import java.util.List;

public class homework2 {
	
	
	/*
	 * matrix means the input 
	 * valueMatrix store the value in each cell
	 * */
	char[][] matrix=null;
	char[][] outputMatrix=null;
	int[][] valueMatrix=null;
	String filename="input.txt";
	
	int Width;
	int NumberOfTypes;
	float times;
	
	int nextCol;
	int nextRow;

	public homework2(){
		
	}
	public static void main(String[] args){
		 homework2 hw=new homework2();
			hw.parseInput();
			hw.runAlgorithm();
		    hw.generateOutput();
	}
	
	//parse the input file
	public void parseInput(){
		try{
			BufferedReader input=new BufferedReader(new FileReader(filename));
			Width=Integer.parseInt(input.readLine());
			NumberOfTypes=Integer.parseInt(input.readLine());
			times=Float.parseFloat(input.readLine());
			matrix=new char[Width][Width];
			outputMatrix=new char[Width][Width];
		    valueMatrix=new int[Width][Width];
			String line="";
			int index=0;
			while((line=input.readLine())!=null){
				for(int i=0;i<Width;i++){		
					matrix[index][i]=line.charAt(i);
				}
				index++;
			}
			input.close();
		}
		catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	//generate the output file
	public void generateOutput(){
		try{
			BufferedWriter output=new BufferedWriter(new FileWriter("output.txt"));
			    char col=(char)(nextCol+'a');
			    output.write(col+""+nextRow+"\n");
				for(int i=0;i<Width;i++){
					String temp=new String(outputMatrix[i]);
					output.write(temp+"\n");
				}
			
			
			output.close();
		}
		catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	public void runAlgorithm(){
		
	}
	
	/*
	 * role ==0 for other role ==1 for me
	 * depth <=3
	 * */
	public class info{
		public int MoveRow;
		public int MoveCol;
		public int Score;
		public info(int r,int c,int s){
			this.MoveRow=r;
			this.MoveCol=c;
			this.Score=s;
		}
	}
	public info minimax(int depth,int role,char[][] state,int curScore){
		//保存一开始的state
		char[][] rootState=new char[Width][Width];
		for(int i=0;i<Width;i++){
			for(int j=0;j<Width;j++){
				rootState[i][j]=state[i][j];
			}
		}
		
		
		//当我的turn的时候，希望得到最大的那个结果.
		if(role==1){
			//记录最优的当前move,以及最好分数
			int NextMove=-1;
			int bestScore=-1;
			//尝试每一个位置
			for(int i=0;i<Width;i++){
				for(int j=0;j<Width;j++){
					if(state[i][j]=='*')continue;
					int score=changeState(i,j,state);
					bestScore=Math.max(bestScore, minimax(depth+1,0,state,curScore+score));
					replace(state,rootState);
				}
			}
		}
		//当对手的turn的时候，对方希望我的值最小.
		else if(role==0){
			for(int i=0;i<Width;i++){
				for(int j=0;j<Width;j++){
					if(state[i][j]=='*')continue;
				}
			}
		}
		
	}
	
	private void replace(char[][] state, char[][] rootState) {
		// TODO Auto-generated method stub
		
	}
	//实现更改棋盘并且返回更改操作所产生的新得分
	public int changeState(int i, int j, char[][] state) {
		// TODO Auto-generated method stub
		return 0;
	}

}
